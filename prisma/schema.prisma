datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String?   // Will be null if the user signed up via Google
  position     String?
  organization String?
  role         String    @default("normal") // "admin", "moderator", "normal"
  googleId     String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  threads      Thread[]  // Relation to threads
  messages     Message[] // Relation to messages
}

model Thread {
  id            Int       @id @default(autoincrement())
  title         String
  userId        Int       // Foreign key to User
  user          User      @relation(fields: [userId], references: [id])
  messages      Message[] // Relation to messages
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastContext   String?   @db.Text  // Stores the last conversation context
  keyTopics     String[]  // Stores key topics discussed in the thread
  lastMessage   Message?  @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId Int?      @unique  // Stores ID of the last message for quick access
}

model Message {
  id            Int      @id @default(autoincrement())
  content       String   @db.Text
  role          String   // "user" or "assistant"
  threadId      Int      // Foreign key to Thread
  thread        Thread   @relation(fields: [threadId], references: [id])
  userId        Int      // Foreign key to User
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  threadAsLast  Thread?  @relation("LastMessage")
  contextScore  Float?   // Relevance score for context tracking
  parentMsgId   Int?     // Reference to parent message for context chains
  messageType   String?  // Type of message (e.g., "question", "followup", "clarification")
}
